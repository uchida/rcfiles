" vimrc specific to machine local

" use dark background
set background=dark
" disable verifyenc
let g:plugin_verifyenc_disable=1

" Vundle
filetype off
set rtp+=~/.vim/vundle/
call vundle#rc()
Bundle 'spec.vim'
Bundle 'sudo.vim'
Bundle 'autodate.vim'
"Bundle 'davidhalter/jedi-vim'
"Bundle 'pythoncomplete'
"Bundle 'skk.vim'
"Bundle 'tyru/eskk.vim'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippets'
Bundle 'Rip-Rip/clang_complete'
Bundle 'osyo-manga/neocomplcache-clang_complete'
filetype plugin indent on

" skk.vim : Japanese SKK 
" http://www.vim.org/scripts/script.php?script_id=1589
let skk_jisyo='~/.emacs.d/skk/jisyo'
"let skk_large_jisyo='/usr/osxws/share/skk/SKK-JISYO.L'
let skk_auto_save_jisyo=1
let skk_keep_state=0
let skk_egg_like_newline=1
let skk_show_annotation=1
let skk_use_face=1

" eskk.vim: aims to provide powerful input method platform in Vim
" https://github.com/tyru/eskk.vim
let g:eskk#dictionary={'path': "~/.emacs.d/skk/jisyo", 'sorted': 0, 'encoding': 'euc-jp'}
"let g:eskk#large_dictionary='/usr/osxws/share/skk/SKK-JISYO.L'
let g:eskk#directory='~/.vim/eskk'
let g:eskk#show_annotation=1
let g:eskk#egg_like_newline=1
let g:eskk#egg_like_newline_completion=1
let g:eskk#enable_completion=0
let g:eskk#keep_state=0
" remap to disable eskk instead of switching ascii-mode
"runtime! plugin/eskk.vim
"EskkMap -remap l <Plug>(eskk:disable)

" spec.vim: spec file plugin 
" http://www.vim.org/scripts/script.php?script_id=98
language time C 
"let spec_chglog_format='%a %b %e %Y Your Name <user@example.com>'
autocmd BufNewFile,BufRead *.spec setf spec

" autodate.vim: A customizable plugin to update time stamps automatically
" http://www.vim.org/scripts/script.php?script_id=291
let g:autodate_disable=0
let g:autodate_lines=20
let g:autodate_keyword_pre='Last modified: '
let g:autodate_keyword_post='$'
let g:autodate_format='%a %e %b %T %Z %Y'

" clang_complete: Vim plugin that use clang for completing C/C++ code
" https://github.com/Rip-Rip/clang_complete
let g:clang_complete_auto=1
let g:clang_use_library=1
"let g:clang_library_path="/usr/lib"
" quick fix
let g:clang_periodic_quickfix=1
let g:clang_complete_copen=1

" neocomplecache: Ultimate auto completion system for Vim
" https://github.com/Shougo/neocomplcache
let g:neocomplcache_enable_at_startup=1
let g:neocomplcache_enable_smart_case=1
let g:neocomplcache_enable_camel_case_completion=1
let g:neocomplcache_temporary_dir=expand('~/.vim/neocon')
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
if !exists('g:neocomplcache_include_paths')
    let g:neocomplcache_include_paths={}
endif
"let g:neocomplcache_include_paths.cpp=".,/usr/include/c++/4.2.1,/usr/osxws/include"

" neocomplcache-snippets-complete
" https://github.com/Shougo/neocomplcache-snippets-complete
let g:NeoComplCache_SnippetsDir='~/.vim/snippets'
" smart return to expand snippets
imap <expr><CR> neocomplcache#sources#snippets_complete#expandable() ?
            \ "\<Plug>(neocomplcache_snippets_expand)" : "\<CR>"
smap <Tab> <Plug>(neocomplcache_snippets_expand)

" neocomplcache & clang_complete
let g:neocomplcache_force_overwrite_completefunc=1
" overwrite <CR> map in ClangCompleteInit()
autocmd FileType c,cpp,objc,objcpp call OverwriteClangCompKeys()
function! OverwriteClangCompKeys()
    autocmd InsertEnter * 
            \ inoremap <expr><buffer><CR>
            \   neocomplcache#smart_close_popup() . "\<CR>"
    autocmd InsertEnter *
            \ imap <expr><buffer><CR> 
            \   neocomplcache#sources#snippets_complete#expandable() ?
            \           "\<Plug>(neocomplcache_snippets_expand)" : "\<CR>"
endfunction

" pythoncomplete: Python Omni Completion
" http://www.vim.org/scripts/script.php?script_id=1542
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" jedi-vim: awesome Python autocompletion with VIM
" https://github.com/davidhalter/jedi-vim
set completeopt=longest,menuone,preview
set splitbelow " show docstring in window below
let g:neocomplcache_enable_auto_select=0
let g:jedi#auto_initialization=1
let g:jedi#popup_on_dot=0
let g:jedi#show_function_definition=0
"autocmd  FileType python let b:did_ftplugin=1
if !exists('g:neocomplcache_force_omni_patterns')
      let g:neocomplcache_force_omni_patterns={}
endif
let g:neocomplcache_force_omni_patterns.python='[^. \t]\.\w*'

