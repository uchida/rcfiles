" vimrc specific to machine local

" use dark background
set background=dark
" disable verifyenc
let g:plugin_verifyenc_disable=1
" access the system clipboard
set clipboard=unnamed

" Vundle
filetype off
set rtp+=~/.vim/vundle/
call vundle#rc()
"Bundle 'sudo.vim'
"Bundle 'spec.vim'
"Bundle 'autodate.vim'
"Bundle 'skk.vim'
"Bundle 'tyru/eskk.vim'
"Bundle 'Rip-Rip/clang_complete'
"Bundle 'davidhalter/jedi-vim'
"Bundle 'Shougo/neocomplcache'
"Bundle 'Shougo/neosnippet'
"Bundle 'pangloss/vim-javascript'
"Bundle 'lepture/vim-jinja'
"Bundle 'c9s/perlomni.vim'
"Bundle 'Shougo/unite.vim'
"Bundle 'airblade/vim-gitgutter'
"Bundle 't9md/vim-unite-ack'
"Bundle 'h1mesuke/unite-outline'
"Bundle 'ujihisa/unite-locate'
"Bundle 'tacroe/unite-alias'
"Bundle 'thinca/vim-unite-history'
"Bundle 'osyo-manga/unite-quickfix'
"Bundle 'donnut/vim-php54-syntax'
"Bundle 'sh.vim'
"Bundle 'nanotech/jellybeans.vim'
filetype plugin indent on

" skk.vim: an implementation of the Japanese SKK
" http://www.vim.org/scripts/script.php?script_id=1589
let skk_jisyo='~/.emacs.d/skk/jisyo'
let skk_large_jisyo='~/.emacs.d/skk/SKK-JISYO.L'
let skk_auto_save_jisyo=1
let skk_keep_state=0
let skk_egg_like_newline=1
let skk_show_annotation=1
let skk_use_face=1

"" eskk.vim: aims to provide powerful input method platform in Vim
"" https://github.com/tyru/eskk.vim
"let g:eskk#dictionary={'path': "~/.emacs.d/skk/jisyo", 'sorted': 0, 'encoding': 'euc-jp'}
"let g:eskk#large_dictionary='~/.emacs.d/skk/SKK-JISYO.L'
"let g:eskk#directory='~/.vim/eskk'
"let g:eskk#show_annotation=1
"let g:eskk#egg_like_newline=1
"let g:eskk#egg_like_newline_completion=1
""let g:eskk#enable_completion=1
"let g:eskk#keep_state=1
"setlocal omnifunc=syntaxcomplete#Complete

" spec.vim: spec file plugin
" http://www.vim.org/scripts/script.php?script_id=98
"language time C
"let spec_chglog_format='%a %b %e %Y Akihiro Uchida <>'
"autocmd BufNewFile,BufRead *.spec setf spec

" autodate.vim: A customizable plugin to update time stamps automatically
" http://www.vim.org/scripts/script.php?script_id=291
"let g:autodate_disable=0
"let g:autodate_lines=20
"let g:autodate_keyword_pre='Last modified: '
"let g:autodate_keyword_post='$'
"let g:autodate_format='%a %e %b %T %Z %Y'

" clang_complete: Vim plugin that use clang for completing C/C++ code
" https://github.com/Rip-Rip/clang_complete
let g:clang_complete_auto=1
let g:clang_use_library=1
"let g:clang_library_path="/usr/lib"
" quick fix
let g:clang_periodic_quickfix=1
let g:clang_complete_copen=1

" neocomplecache: Ultimate auto completion system for Vim
" https://github.com/Shougo/neocomplcache
let g:neocomplcache_enable_at_startup=1
let g:neocomplcache_enable_smart_case=1
let g:neocomplcache_enable_camel_case_completion=1
let g:neocomplcache_temporary_dir=expand('~/.vim/neocon')
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
if !exists('g:neocomplcache_include_paths')
    let g:neocomplcache_include_paths={}
endif
"let g:neocomplcache_include_paths.cpp=".,/usr/include"

" neosnippet: adds snippet support to Vim
" https://github.com/Shougo/neosnippet
let g:neocomplcache_snippets_dir='~/.vim/snippets'
" smart return to expand snippets
imap <expr><CR> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_jump_or_expand)" : "\<CR>"
vmap <expr><TAB> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_jump_or_expand)" : "\<Tab>"

" neocomplcache & clang_complete
let g:neocomplcache_force_overwrite_completefunc=1
if !exists("g:neocomplcache_force_omni_patterns")
        let g:neocomplcache_force_omni_patterns = {}
endif
" set regex pattern for omnifunc
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'
let g:clang_complete_auto=0
" overwrite <CR> map in ClangCompleteInit()
autocmd FileType c,cpp,objc,objcpp call OverwriteClangCompKeys()
function! OverwriteClangCompKeys()
    "autocmd InsertEnter * inoremap <expr><buffer><CR>
    "        \   neocomplcache#smart_close_popup() . "\<CR>"
    autocmd InsertEnter * imap <expr><buffer><CR>
            \   neosnippet#expandable() ?
            \   "\<Plug>(neosnippet_jump_or_expand)" : "\<CR>"
endfunction
if !exists('g:neocomplcache_same_filetype_lists')
    let g:neocomplcache_same_filetype_lists = {}
endif

" jedi-vim: awesome Python autocompletion with VIM
" https://github.com/davidhalter/jedi-vim
set completeopt=longest,menuone,preview
set splitbelow " show docstring in window below
let g:neocomplcache_enable_auto_select=0
let g:jedi#auto_initialization=1
let g:jedi#popup_on_dot=0
let g:jedi#show_function_definition=0
autocmd  FileType python let b:did_ftplugin=1
if !exists('g:neocomplcache_force_omni_patterns')
      let g:neocomplcache_force_omni_patterns={}
endif
if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns={}
endif
let g:neocomplcache_force_omni_patterns.python='[^. \t]\.\w*'
let g:neocomplcache_omni_patterns.python='[^. \t]\.\w*'

" perlomni
let g:neocomplcache_force_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" unite.vim
let g:unite_data_directory=expand('~/.vim/unite')
let g:ref_cache_dir=expand('~/.vim/ref')

" shell script
let g:sh_indent_case_labels=1
if has("autocmd")
    " for Makefile
    autocmd BufRead *.rst setlocal softtabstop=2 shiftwidth=2
endif

let php_folding=0

" jellybeans: A colorful, dark color scheme
" https://github.com/nanotech/jellybeans.vim
"colorscheme jellybeans
